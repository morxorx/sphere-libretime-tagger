name: Build LibreTime Tagger

on:
  push:
    tags: ['v*']
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  APP_NAME: "LibreTime Tagger"
  SCRIPT_FILE: "libretime_tagger.py"
  MAC_ICON: "icon.icns"
  WIN_ICON: "icon.ico"

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow mutagen
    
    - name: Build Windows executable
      run: |
        # Keep onefile for Windows (works fine)
        pyinstaller --name="${{ env.APP_NAME }}" --windowed --onefile --icon=${{ env.WIN_ICON }} --clean ${{ env.SCRIPT_FILE }}
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: LibreTime-Tagger-Windows
        path: dist/${{ env.APP_NAME }}.exe
    
    - name: Get release upload URL
      if: startsWith(github.ref, 'refs/tags/')
      id: get_release
      uses: actions/github-script@v6
      env:
        TAG_NAME: ${{ github.ref_name }}
      with:
        script: |
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: process.env.TAG_NAME
          });
          core.setOutput('upload_url', release.upload_url);
    
    - name: Upload Windows to release
      if: steps.get_release.outputs.upload_url
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ./dist/${{ env.APP_NAME }}.exe
        asset_name: ${{ env.APP_NAME }}-Windows.exe
        asset_content_type: application/octet-stream

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.9]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow mutagen
    
    - name: Build macOS app (onedir mode)
      run: |
        # Use explicit filenames to avoid variable expansion issues
        pyinstaller --name="LibreTime Tagger" --windowed --onedir --icon="icon.icns" --clean "libretime_tagger.py"
    
    - name: Create DMG package from app bundle
      run: |
        brew install create-dmg
        create-dmg \
          --volname "LibreTime Tagger" \
          --volicon "icon.icns" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "LibreTime Tagger.app" 175 180 \
          --hide-extension "LibreTime Tagger.app" \
          --app-drop-link 425 180 \
          "LibreTime Tagger-${GITHUB_REF_NAME}.dmg" \
          "dist/"
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: LibreTime-Tagger-macOS
        path: |
          dist/LibreTime Tagger.app/
          LibreTime Tagger-*.dmg
    
    - name: Get release upload URL
      if: startsWith(github.ref, 'refs/tags/')
      id: get_release
      uses: actions/github-script@v6
      env:
        TAG_NAME: ${{ github.ref_name }}
      with:
        script: |
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: process.env.TAG_NAME
          });
          core.setOutput('upload_url', release.upload_url);
    
    - name: Create zip of macOS app bundle
      if: steps.get_release.outputs.upload_url
      run: |
        cd dist
        ditto -c -k --keepParent "LibreTime Tagger.app" "LibreTime Tagger-macOS.app.zip"
    
    - name: Upload macOS app bundle to release
      if: steps.get_release.outputs.upload_url
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ./dist/LibreTime Tagger-macOS.app.zip
        asset_name: LibreTime Tagger-macOS.app.zip
        asset_content_type: application/zip
    
    - name: Upload macOS DMG to release
      if: steps.get_release.outputs.upload_url
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ./LibreTime Tagger-${GITHUB_REF_NAME}.dmg
        asset_name: LibreTime Tagger-macOS.dmg
        asset_content_type: application/octet-stream
